{"version":3,"sources":["components/card/card.component.js","components/card-list/card-list.component.js","components/search-box/search-box.component.js","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","fetch","then","response","json","res","this","filteredMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2SAIaA,G,kBAAO,SAAAC,GAAK,OACrB,sBAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BACtB,6BAAKL,EAAMI,QAAQE,OACnB,4BAAIN,EAAMI,QAAQG,aCJbC,EAAW,SAAAR,GAAK,OACzB,qBAAKC,UAAU,YAAf,SACKD,EAAMS,SAASC,KAAI,SAAAN,GAAO,OACvB,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,UCHlBM,G,MAAY,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAaC,EAAf,EAAeA,aAAf,OACrB,uBAAOZ,UAAU,SACVa,KAAK,SACLF,YAAaA,EACbG,SAAUF,MCgDNG,E,kDAjDX,aAAe,IAAD,8BACV,gBA0BJD,SAAW,SAACE,GACR,EAAKC,SAAS,CACVC,YAAaF,EAAEG,OAAOC,SA3B1B,EAAKC,MAAQ,CACTb,SAAU,CACN,CACIH,KAAM,SACND,GAAI,QAER,CACIC,KAAM,UACND,GAAI,QAER,CACIC,KAAM,eACND,GAAI,UAGZc,YAAa,IAjBP,E,gEAqBO,IAAD,OAChBI,MAAM,8CACDC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAG,OAAI,EAAKT,SAAS,CAACT,SAAUkB,S,+BASpC,IAAD,SAC4BC,KAAKN,MAA9Bb,EADH,EACGA,SAAUU,EADb,EACaA,YACZU,EAAmBpB,EAASqB,QAAO,SAAA1B,GAAO,OAAIA,EAAQE,KAAKyB,cAAcC,SAASb,MAExF,OACI,sBAAKlB,UAAU,MAAf,UACI,mDACA,cAAC,EAAD,CAAWW,YAAY,kBACZC,aAAc,SAAAI,GAAC,OAAI,EAAKF,SAASE,MAC5C,cAAC,EAAD,CAAUR,SAAUoB,W,GA5ClBI,aCOHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.b8cc0e18.chunk.js","sourcesContent":["import React from 'react'\n\nimport './card.styles.css'\n\nexport const Card = props => (\n    <div className='card-container'>\n        <img alt=\"monster\" src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`}/>\n        <h2>{props.monster.name}</h2>\n        <p>{props.monster.email}</p>\n    </div>\n)","import React from 'react'\nimport './card-list.styles.css'\nimport {Card} from \"../card/card.component\";\n\nexport const CardList = props => (\n    <div className='card-list'>\n        {props.monsters.map(monster => (\n            <Card key={monster.id} monster={monster}></Card>\n        ))}</div>\n)\n","import React from 'react'\n\nimport './search-box.styles.css'\n\nexport const SearchBox = ({placeholder, handleChange }) =>(\n    <input className='search'\n           type='search'\n           placeholder={placeholder}\n           onChange={handleChange}/>\n)","import React, {Component} from \"react\";\nimport './App.css';\nimport {CardList} from \"./components/card-list/card-list.component\";\nimport {SearchBox} from \"./components/search-box/search-box.component\";\n\nclass App extends Component {\n\n    constructor() {\n        super();\n        this.state = {\n            monsters: [\n                {\n                    name: 'Zombie',\n                    id: 'asc1'\n                },\n                {\n                    name: 'Dracula',\n                    id: 'asc2'\n                },\n                {\n                    name: 'Frankenstein',\n                    id: 'asc1w'\n                }\n            ],\n            searchField: \"\"\n        }\n    }\n\n    componentDidMount() {\n        fetch('https://jsonplaceholder.typicode.com/users')\n            .then(response => response.json())\n            .then(res => this.setState({monsters: res}))\n    }\n\n    onChange = (e) => {\n        this.setState({\n            searchField: e.target.value\n        })\n    }\n\n    render() {\n        const { monsters, searchField} = this.state;\n        const filteredMonsters = monsters.filter(monster => monster.name.toLowerCase().includes(searchField))\n\n        return (\n            <div className='App'>\n                <h1> Monsters Rolodex</h1>\n                <SearchBox placeholder='search monsters'\n                           handleChange={e => this.onChange(e)}/>\n                <CardList monsters={filteredMonsters}/>\n            </div>\n        );\n    }\n\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}